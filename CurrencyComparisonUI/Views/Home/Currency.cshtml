@{
    ViewData["Title"] = "Kurlar";
}


<h1>Kurlar</h1>

<div class="container mt-5">
    <div class="mt-4">
        <div class="alert alert-info text-center" role="alert">
            Lütfen Gün Seçerken Haftasonu olmamasına dikkat edin!
        </div>
        <label for="currencyCode">Para Birimi:</label>
        <select id="currencyCode" class="form-control mb-2" required>
            <option value="" disabled selected>Para Birimi Seçin</option>
            <option value="EUR">EUR - Euro</option>
            <option value="USD">USD - Abd Doları</option>
            <option value="GBP">GBP - İngiliz Sterlini</option>
            <option value="CHF">CHF - İsviçre Frangı</option>
        </select>

        <label for="date">Tarih Seçiniz:</label>
        <input type="date" id="date" class="form-control mb-2" required />
        <button class="btn btn-primary mt-2" id="getCurrencyData">Görüntüle</button>
    </div>

    <!-- Currency Data Table -->
    <table class="table table-bordered mt-4" id="currencyTable">
        <thead>
            <tr>
                <th>Para Birimi</th>
                <th>Mevcut Kur</th>
                <th>Seçilen Tarihteki Kur</th>
                <th>Fark</th>
                <th>Değişim Yüzdesi </th>
                <th>Değişim Grafiği</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>

    // Sayfa yüklenmeden önce token kontrolü yap
    (function () {
        const token = localStorage.getItem("authToken");

        if (!token || !isTokenValid(token)) {
            alert("Geçerli bir oturum bulunmamaktadır veya oturum süresi dolmuş. Lütfen tekrar giriş yapın.");
            window.location.href = "/"; // Index sayfasına yönlendir
        }

        else{
            const remainingTime = getTokenRemainingTimeFormatted(token);
             alert(`Hoşgeldiniz! Oturum için Kalan süre: ${remainingTime}`);
        }
    })();


    document.getElementById('getCurrencyData').addEventListener('click', async function () {
        const token = localStorage.getItem("authToken");
        if (!isTokenValid(token)) {
            alert("Geçerli bir oturum bulunmamaktadır. Lütfen giriş yapın.");
            window.location.href = "/";
            return;
        }

        const currencyCode = document.getElementById("currencyCode").value;
        const dateInput = document.getElementById("date").value;

        if (!currencyCode || !dateInput) {
            alert("Lütfen hem para birimi kodunu hem de tarihi belirtin.");
            return;
        }

        const date = new Date(dateInput);
        if (isNaN(date)) {
            alert("Geçersiz tarih biçimi.");
            return;
        }

        const formattedDate = `${String(date.getDate()).padStart(2, '0')}${String(date.getMonth() + 1).padStart(2, '0')}${date.getFullYear()}`;
        const apiUrl = `https://localhost:7173/api/Currency/${currencyCode}/${formattedDate}`;

        try {
            const tableBody = document.querySelector("#currencyTable tbody");
            tableBody.innerHTML = '';

            const response = await fetch(apiUrl, {
                method: 'GET',
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP hatası! durum: ${response.status}`);
            }

            const data = await response.json();

            if (data.data && data.data.currentRate && data.data.oldRate) {
                const currentRate = parseFloat(data.data.currentRate);
                const oldRate = parseFloat(data.data.oldRate);
                const difference = currentRate - oldRate;
                const percentageChange = ((difference / oldRate) * 100).toFixed(2);

                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${currencyCode}</td>
                    <td>${currentRate.toFixed(4)}</td>
                    <td>${oldRate.toFixed(4)}</td>
                    <td>${difference.toFixed(4)}</td>
                    <td>${percentageChange}%</td>
                    <td>
                        <canvas id="changeGraph-${currencyCode}" width="200" height="100"></canvas>
                    </td>
                `;
                tableBody.appendChild(row);

                // Bar Chart: Eski ve Yeni Kur
                const barCtx = document.getElementById(`changeGraph-${currencyCode}`).getContext('2d');
                new Chart(barCtx, {
                    type: 'bar',
                    data: {
                        labels: ['Seçilen Tarihteki Kur', 'Mevcut Kur'],
                        datasets: [{
                            label: 'Kur Karşılaştırması',
                            data: [oldRate, currentRate],
                            backgroundColor: [
                                '#3498db',
                                difference >= 0 ? '#2ecc71' : '#e74c3c'
                            ],
                            borderColor: [
                                '#2980b9',
                                difference >= 0 ? '#27ae60' : '#c0392b'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });

               
            } else {
                alert("API geçerli veri döndürmedi.");
            }
        } catch (error) {
            console.error("Veri alınırken hata oluştu:", error);
            alert("Veri alınırken bir hata oluştu. Lütfen daha sonra tekrar deneyin.");
        }
    });

    function isTokenValid(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const exp = payload.exp;
            const currentTime = Math.floor(Date.now() / 1000);

            if (exp < currentTime) {
                return false;
            }

            return true;
        } catch (e) {
            console.error("Token doğrulama hatası:", e);
            return false;
        }
    }

        function getTokenRemainingTimeFormatted(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const exp = payload.exp;
            const currentTime = Math.floor(Date.now() / 1000);
            const remainingSeconds = exp - currentTime;

            if (remainingSeconds <= 60) {
                return `${remainingSeconds} saniye`;
            } else {
                const remainingMinutes = Math.floor(remainingSeconds / 60);
                return `${remainingMinutes} dakika`;
            }
        } catch (e) {
            console.error("Token süresi hesaplama hatası:", e);
            return "Hata: Süre hesaplanamıyor.";
        }
    }
</script>



